from sqlalchemy import Column, Integer, String, Float, JSON
from .database import Base


class Notes(Base):
    __tablename__ = "notes"

    id = Column(Integer, primary_key=True, autoincrement=True)
    note = Column(Integer)
    broker = Column(String)
    opDate = Column(String)
    liqDate = Column(String)
    opType = Column(String)
    ticker = Column(String)
    quantity = Column(Float)
    price = Column(Float)

    # Brazilian taxes and fees per order
    irrf = Column(Float)
    liqFee = Column(Float) # Taxa de liquidacao
    registerFee = Column(Float) # Taxa de registro
    derivativeFee = Column(Float)  # Taxa Termo/Opções
    anaFee = Column(Float)  # Taxa A.N.A.
    emolumentos = Column(Float)
    operationalFee = Column(Float) # Taxa operacional
    executionFee = Column(Float) # Taxa de execucao
    custodyFee = Column(Float) # Taxa de Custodia
    taxes = Column(Float)
    others = Column(Float)

class TickersInfos(Base):
    __tablename__ = "tickersInfos"

    id = Column(Integer, primary_key=True, autoincrement=True)
    ticker = Column(String, unique=True)
    cnpj = Column(String)
    website = Column(String)
    industry = Column(String)
    industryDisp = Column(String)
    sectorDisp = Column(String)
    longBusinessSummary = Column(String)
    companyOfficers = Column(JSON)
    auditRisk = Column(Integer)
    boardRisk = Column(Integer)
    compensationRisk = Column(Integer)
    shareHolderRightsRisk = Column(Integer)
    overallRisk = Column(Integer)
    governanceEpochDate = Column(Integer)
    maxAge = Column(Integer)
    priceHint = Column(Integer)
    previousClose = Column(Float)
    open = Column(Float)
    dayLow = Column(Float)
    dayHigh = Column(Float)
    regularMarketPreviousClose = Column(Float)
    regularMarketOpen = Column(Float)
    regularMarketDayLow = Column(Float)
    regularMarketDayHigh = Column(Float)
    dividendRate = Column(Float)
    dividendYield = Column(Float)
    exDividendDate = Column(Integer)
    payoutRatio = Column(Float)
    fiveYearAvgDividendYield = Column(Float)
    beta = Column(Float)
    trailingPE = Column(Float)
    forwardPE = Column(Float)
    volume = Column(Integer)
    regularMarketVolume = Column(Integer)
    averageVolume = Column(Integer)
    averageVolume10days = Column(Integer)
    averageDailyVolume10Day = Column(Integer)
    bid = Column(Float)
    ask = Column(Float)
    marketCap = Column(Integer)
    fiftyTwoWeekLow = Column(Float)
    fiftyTwoWeekHigh = Column(Float)
    priceToSalesTrailing12Months = Column(Float)
    fiftyDayAverage = Column(Float)
    twoHundredDayAverage = Column(Float)
    trailingAnnualDividendRate = Column(Float)
    trailingAnnualDividendYield = Column(Float)
    currency = Column(String)
    enterpriseValue = Column(Integer)
    profitMargins = Column(Float)
    floatShares = Column(Integer)
    sharesOutstanding = Column(Integer)
    heldPercentInsiders = Column(Float)
    heldPercentInstitutions = Column(Float)
    impliedSharesOutstanding = Column(Integer)
    bookValue = Column(Float)
    priceToBook = Column(Float)
    lastFiscalYearEnd = Column(Integer)
    nextFiscalYearEnd = Column(Integer)
    mostRecentQuarter = Column(Integer)
    earningsQuarterlyGrowth = Column(Float)
    netIncomeToCommon = Column(Integer)
    trailingEps = Column(Float)
    forwardEps = Column(Float)
    pegRatio = Column(Float)
    lastSplitFactor = Column(String)
    lastSplitDate = Column(Integer)
    enterpriseToRevenue = Column(Float)
    enterpriseToEbitda = Column(Float)
    fiftyTwoWeekChange = Column(Float)
    SandP52WeekChange = Column(Float)
    lastDividendValue = Column(Float)
    lastDividendDate = Column(Integer)
    exchange = Column(String)
    quoteType = Column(String)
    symbol = Column(String)
    underlyingSymbol = Column(String)
    shortName = Column(String)
    longName = Column(String)
    firstTradeDateEpochUtc = Column(Integer)
    timeZoneFullName = Column(String)
    timeZoneShortName = Column(String)
    uuid = Column(String)
    messageBoardId = Column(String)
    gmtOffSetMilliseconds = Column(Integer)
    currentPrice = Column(Float)
    targetHighPrice = Column(Float)
    targetLowPrice = Column(Float)
    targetMeanPrice = Column(Float)
    targetMedianPrice = Column(Float)
    recommendationMean = Column(Float)
    recommendationKey = Column(String)
    numberOfAnalystOpinions = Column(Integer)
    totalCash = Column(Integer)
    totalCashPerShare = Column(Float)
    ebitda = Column(Integer)
    totalDebt = Column(Integer)
    quickRatio = Column(Float)
    currentRatio = Column(Float)
    totalRevenue = Column(Integer)
    debtToEquity = Column(Float)
    revenuePerShare = Column(Float)
    returnOnAssets = Column(Float)
    returnOnEquity = Column(Float)
    freeCashflow = Column(Integer)
    operatingCashflow = Column(Integer)
    earningsGrowth = Column(Float)
    revenueGrowth = Column(Float)
    grossMargins = Column(Float)
    ebitdaMargins = Column(Float)
    operatingMargins = Column(Float)
    financialCurrency = Column(String)
    trailingPegRatio = Column(Float)
    fullTimeEmployees = Column(Integer)

class Events(Base):
    __tablename__ = "events"

    id = Column(Integer, primary_key=True, autoincrement=True)
    ticker = Column(String)
    event_type = Column(String)
    date = Column(String)
    quantity = Column(Integer)
    value = Column(Float)
